// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relaciones con participación ciudadana
  inquiries Inquiry[]
  votes     Vote[]
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Instituciones gubernamentales
model Institution {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String   // Ministerio, Secretaría, Departamento, etc.
  address     String?
  phone       String?
  email       String?
  website     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relaciones
  profiles    InstitutionalProfile[]
  qrCodes     QRCode[]
  documents   Document[]
  inquiries   Inquiry[]
  consultations Consultation[]
}

// Perfiles institucionales con información pública
model InstitutionalProfile {
  id            String   @id @default(cuid())
  institutionId String
  title         String
  content       String
  category      String   // Presupuesto, Informe, Actividades, etc.
  publishDate   DateTime @default(now())
  isPublic      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relaciones
  institution   Institution @relation(fields: [institutionId], references: [id], onDelete: Cascade)
}

// Códigos QR para acceso rápido
model QRCode {
  id            String   @id @default(cuid())
  institutionId String
  code          String   @unique // El código QR generado
  title         String
  description   String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relaciones
  institution   Institution @relation(fields: [institutionId], references: [id], onDelete: Cascade)
}

// Documentos públicos
model Document {
  id            String   @id @default(cuid())
  institutionId String
  title         String
  description   String?
  fileUrl       String   // URL del archivo almacenado
  fileType      String   // PDF, DOC, XLS, etc.
  fileSize      Int      // Tamaño en bytes
  category      String   // Informe, Decreto, Resolución, etc.
  publishDate   DateTime @default(now())
  isPublic      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relaciones
  institution   Institution @relation(fields: [institutionId], references: [id], onDelete: Cascade)
}

// Consultas ciudadanas
model Inquiry {
  id            String   @id @default(cuid())
  userId        String?
  institutionId String
  subject       String
  content       String
  status        String   @default("pending") // pending, answered, closed
  response      String?
  responseDate  DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relaciones
  user          User?        @relation(fields: [userId], references: [id])
  institution   Institution @relation(fields: [institutionId], references: [id], onDelete: Cascade)
}

// Consultas públicas para participación
model Consultation {
  id            String   @id @default(cuid())
  institutionId String
  title         String
  description   String
  startDate     DateTime
  endDate       DateTime
  status        String   @default("active") // active, closed, cancelled
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relaciones
  institution   Institution @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  votes         Vote[]
}

// Votos en consultas públicas
model Vote {
  id            String   @id @default(cuid())
  userId        String?
  consultationId String
  option        String   // Opción seleccionada
  createdAt     DateTime @default(now())
  
  // Relaciones
  user          User?        @relation(fields: [userId], references: [id])
  consultation  Consultation @relation(fields: [consultationId], references: [id], onDelete: Cascade)
  
  @@unique([userId, consultationId])
}